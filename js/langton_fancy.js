// Generated by CoffeeScript 1.4.0
(function() {
  var LangtonApp;

  LangtonApp = (function() {

    function LangtonApp(canvas, button, input) {
      this.canvas = canvas;
      this.button = button;
      this.input = input;
      this.width = canvas.width;
      this.height = canvas.height;
      this.rules = [];
      this.input.value = 'RL';
      this.start = this.execute.bind(this);
      this.stop = this.halt.bind(this);
      this.button.addEventListener('click', this.start);
      this.hex = {
        width: 7,
        height: 2.0 / Math.sqrt(3) * 7
      };
      this.context = this.canvas.getContext('2d');
      this.running = false;
      this.colors = ['#cc001b', '#2c00a6', '#7a9900', '#ff8800', '#cc335c', '#ff40f2', '#33cc99', '#394d13', '#442d59', '#1a332e', '#331a1a', '#e6ace2', '#608071'];
      this.j_max = (this.width / this.hex.width) - 2;
      this.i_max = (this.height / (3.0 / 4.0 * this.hex.height)) - 1;
    }

    LangtonApp.prototype.execute = function() {
      var i, j, row, _i, _j, _ref, _ref1;
      if ((!this.running) && this.parse_input()) {
        this.button.innerHTML = 'stop';
        this.button.removeEventListener('click', this.start);
        this.button.addEventListener('click', this.stop);
        this.running = true;
        this.ant = {
          direction: 0,
          i: Math.floor(this.i_max / 2),
          j: Math.floor(this.j_max / 2)
        };
        this.board = [];
        for (i = _i = 0, _ref = this.i_max; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          row = [];
          for (j = _j = 0, _ref1 = this.j_max; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            row[j] = 0;
          }
          this.board[i] = row;
        }
        return this.loop();
      }
    };

    LangtonApp.prototype.halt = function() {
      this.running = false;
      this.button.removeEventListener('click', this.stop);
      this.button.addEventListener('click', this.start);
      return this.button.innerHTML = 'start';
    };

    LangtonApp.prototype.loop = function() {
      if (this.running) {
        if (this.ant.j >= this.j_max || this.ant.j < 0 || this.ant.i >= this.i_max || this.ant.i < 0) {
          this.halt();
        }
        this.canvas.width = this.canvas.width;
        this.draw_board();
        this.draw_ant();
        this.turn_and_step();
        return window.requestAnimationFrame(this.loop.bind(this));
      } else {

      }
    };

    LangtonApp.prototype.parse_input = function() {
      var char, input_string, _i, _len, _ref;
      this.rules = [];
      input_string = this.input.value;
      _ref = input_string.toUpperCase();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        char = _ref[_i];
        switch (char) {
          case 'R':
            this.rules.push(1);
            break;
          case 'S':
            this.rules.push(2);
            break;
          case 'B':
            this.rules.push(3);
            break;
          case 'P':
            this.rules.push(-2);
            break;
          case 'L':
            this.rules.push(-1);
            break;
          case 'F':
            this.rules.push(0);
            break;
          default:
            alert('Rule contains invalid character.');
            this.rules = [];
            return false;
        }
      }
      return true;
    };

    LangtonApp.prototype.turn_and_step = function() {
      var color, dir;
      color = this.board[this.ant.i][this.ant.j];
      dir = this.rules[color];
      this.board[this.ant.i][this.ant.j] = (color + 1) % this.rules.length;
      this.turn(dir);
      return this.step();
    };

    LangtonApp.prototype.turn = function(dir) {
      this.ant.direction += dir;
      if (this.ant.direction > 5) {
        this.ant.direction -= 6;
      }
      if (this.ant.direction < 0) {
        return this.ant.direction += 6;
      }
    };

    LangtonApp.prototype.step = function() {
      if (this.ant.direction === 1) {
        this.ant.j = this.ant.j + 1;
        return;
      }
      if (this.ant.direction === 4) {
        this.ant.j = this.ant.j - 1;
        return;
      }
      if (this.ant.i % 2 === 0) {
        if (this.ant.direction === 0) {
          this.ant.i = this.ant.i - 1;
        }
        if (this.ant.direction === 2) {
          this.ant.i = this.ant.i + 1;
        }
        if (this.ant.direction === 3) {
          this.ant.i = this.ant.i + 1;
          this.ant.j = this.ant.j - 1;
        }
        if (this.ant.direction === 5) {
          this.ant.i = this.ant.i - 1;
          return this.ant.j = this.ant.j - 1;
        }
      } else {
        if (this.ant.direction === 0) {
          this.ant.i = this.ant.i - 1;
          this.ant.j = this.ant.j + 1;
        }
        if (this.ant.direction === 2) {
          this.ant.i = this.ant.i + 1;
          this.ant.j = this.ant.j + 1;
        }
        if (this.ant.direction === 3) {
          this.ant.i = this.ant.i + 1;
        }
        if (this.ant.direction === 5) {
          return this.ant.i = this.ant.i - 1;
        }
      }
    };

    LangtonApp.prototype.mk_coordinates = function(i, j) {
      var x, y;
      if (i % 2 === 0) {
        x = (this.hex.width / 2.0) + j * this.hex.width;
      } else {
        x = (j + 1) * this.hex.width;
      }
      y = (this.hex.height / 2.0) + i * (this.hex.height * (3 / 4));
      return [x, y];
    };

    LangtonApp.prototype.draw_ant = function() {
      var cos;
      cos = this.mk_coordinates(this.ant.i, this.ant.j);
      this.context.beginPath();
      this.context.arc(cos[0], cos[1], 2, 0, 2 * Math.PI, false);
      this.context.fillStyle = 'red';
      return this.context.fill();
    };

    LangtonApp.prototype.draw_board = function() {
      var i, j, _i, _ref, _results;
      _results = [];
      for (i = _i = 0, _ref = this.i_max; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        _results.push((function() {
          var _j, _ref1, _results1;
          _results1 = [];
          for (j = _j = 0, _ref1 = this.j_max; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; j = 0 <= _ref1 ? ++_j : --_j) {
            _results1.push(this.drawSingleHex(i, j));
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    LangtonApp.prototype.drawSingleHex = function(i, j) {
      var cos, x, y;
      cos = this.mk_coordinates(i, j);
      x = cos[0];
      y = cos[1];
      if (this.board[i][j]) {
        cos = this.mk_coordinates(i, j);
        this.context.beginPath();
        this.context.moveTo(x - 0.5 * this.hex.width, y - 0.25 * this.hex.height);
        this.context.lineTo(x, y - 0.5 * this.hex.height);
        this.context.lineTo(x + 0.5 * this.hex.width, y - 0.25 * this.hex.height);
        this.context.lineTo(x + 0.5 * this.hex.width, y + 0.25 * this.hex.height);
        this.context.lineTo(x, y + 0.5 * this.hex.height);
        this.context.lineTo(x - 0.5 * this.hex.width, y + 0.25 * this.hex.height);
        this.context.lineTo(x - 0.5 * this.hex.width, y - 0.25 * this.hex.height);
        this.context.lineWidth = 1;
        this.context.strokeStyle = '#aaa';
        this.context.stroke();
        this.context.fillStyle = this.colors[(this.board[i][j] - 1) % this.colors.length];
        return this.context.fill();
      }
    };

    return LangtonApp;

  })();

  window.onload = function() {
    var app, button, canvas, input;
    canvas = document.getElementById('langton');
    button = document.getElementById('run');
    input = document.getElementById('sequence');
    return app = new LangtonApp(canvas, button, input);
  };

}).call(this);
